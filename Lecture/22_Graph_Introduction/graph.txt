
그래프를 표현하는 방법
	1. Adjacency List
		리스트의 리스트
		한 정점에 연결된 정점 리스트를 저장
		메모리 조금 차지

	2. Adjacency Matrix
		행렬 형태로 그래프 연결 상태 저장
		메모리 많이 차지
		한 정점에 연결된 다른 정점 찾는데 시간이 걸림

	3. Edge List
		List< triplet<wt, src, dest> >
		그래프를 구성하는 edge 의 정보를 저장
	

Graph Traversals
= 그래프의 노드들을 조사하는 것
	BFS = Breadth First Search
		Queue 를 이용
		노드의 이웃을 큐에 넣고
		큐의 top 노드를 조사 => 레벨 순서로 노드를 조사한다
		visit 기록, 2번 방문하지 않도록 한다

	DFS = Depth First Search
		Stack 을 이용
		아니면 function call stack 을 이용
		먼저 넣었던 이웃을 가장 마지막에 찾게 된다
		visit 기록, 2번 방문하지 않도록 한다
		O(V + E)


Topological Sorting
	= 그래프 edge 에 방향이 있을 때, 전체 그래프 노드들을 edge 방향 순서대로 정렬하는 것
	= 전체 노드들의 순서를 알아낸다, 누구의 레벨이 더 높은 지 파악
	= 노드들의 Dependency 를 판단하고, 먼저 와야하는 노드를 먼저 출력한다

	= Direct Acyclic Graph, DAG 에서만 가능하다
	= 만약 그래프가 사이클이 존재한다면 dependency 파악이 안돼, 정렬을 할 수 없다

		Kahn's Algorithm
			Modified BFS
			각 노드로 들어오는 edge 개수인, dependency number 를 파악한다
			dependency 개수가 0 개인 노드만 큐에 넣는다
			큐에서 노드를 꺼내 작업을 한뒤, 연결된 노드들의 dependency number 를 갱신한다


Dijkstra Algorithm
	Shortest Paths
	Weighted Graphs
	Single Source Shortest Paths

	2개의 자료구조를 사용한다
		각 노드에 도달하는 데 