
그래프를 표현하는 방법
	1. Adjacency List
		리스트의 리스트
		한 정점에 연결된 정점 리스트를 저장
		메모리 조금 차지

	2. Adjacency Matrix
		행렬 형태로 그래프 연결 상태 저장
		메모리 많이 차지
		한 정점에 연결된 다른 정점 찾는데 시간이 걸림

	3. Edge List
		List< triplet<wt, src, dest> >
		그래프를 구성하는 edge 의 정보를 저장
	

Graph Traversals
= 그래프의 노드들을 조사하는 것
	BFS = Breadth First Search
		Queue 를 이용
		노드의 이웃을 큐에 넣고
		큐의 top 노드를 조사 => 레벨 순서로 노드를 조사한다
		visit 기록, 2번 방문하지 않도록 한다

	DFS = Depth First Search
		Stack 을 이용
		아니면 function call stack 을 이용
		먼저 넣었던 이웃을 가장 마지막에 찾게 된다
		visit 기록, 2번 방문하지 않도록 한다
		O(V + E)


Topological Sorting
	= 그래프 edge 에 방향이 있을 때, 전체 그래프 노드들을 edge 방향 순서대로 정렬하는 것
	= 전체 노드들의 순서를 알아낸다, 누구의 레벨이 더 높은 지 파악
	= 노드들의 Dependency 를 판단하고, 먼저 와야하는 노드를 먼저 출력한다

	= Direct Acyclic Graph, DAG 에서만 가능하다
	= 만약 그래프가 사이클이 존재한다면 dependency 파악이 안돼, 정렬을 할 수 없다

		Kahn's Algorithm
			Modified BFS
			각 노드로 들어오는 edge 개수인, dependency number 를 파악한다
			dependency 개수가 0 개인 노드만 큐에 넣는다
			큐에서 노드를 꺼내 작업을 한뒤, 연결된 노드들의 dependency number 를 갱신한다


Dijkstra Algorithm
	Single Source => Shortest Path 를 찾는 알고리즘
	Weighted Graphs 에서 사용한다	

	2개의 자료구조를 사용한다
		최단거리를 저장하는 배열, dist
			출발 노드에서 각 노드까지 걸리는 최단 거리를 저장한다
				진짜 최단 거리가 아닌, 지금까지 조사된 최단거리
			최단거리를 모를 때는 MAX 값을 저장
			이 배열의 값 중 가장 작은 값을 가지는 노드
				= 출발 노드에서 가장 가까운 곳에 위치한 노드

		조사 순서를 저장하는 자료구조, Priority Queue or Set
			DFS 를 통해 다른 모든 노드들을 방문하기 위해서 현재 노드의 이웃을 저장하는 용도
			이웃들 중, 거리가 짧은 것 부터 조사해야 하기에 일반 큐를 쓰지 않는다
				출발 노드에서 가깝고, 거리가 짧은 노드부터 조사해야 항상 최단 거리를 구할 수 있다
			이 자료구조에서 노드를 하나씩 빼면서 DFS 방식으로 노드들을 순회한다

	흐름
		순서 자료구조에 담긴 노드 중 첫번째를 빼낸다
			현재 방문하고 있는 노드까지의 최단 거리는 이미 결정됐다고 생각
			최단 거리가 이미 정해졌기에, 해당 노드를 방문했다고 생각

		목적 => 방문한 노드에서 => 이웃들로 가는 최단 거리를 구한다
			Adjacency list 를 통해서 이웃들을 파악한 뒤
			dist 의 값과
			자신의 dist + 이웃에게 가는 weight 값을
			비교, 더 작은 값을 dist 에 넣는다

		이웃의 최단 거리가 갱신되는 경우에만, Priority Queue or Set 에 이웃을 다시 넣는다
			이번 갱신으로 인해서, 조사해야 하는 순서가 바뀌었기 때문에!
			순서 자료구조에 이미 해당 노드가 들어있는 경우, 기존의 것을 제거하고 새로운 노드를 넣어 중복을 없앤다
		
		이제 순서 자료구조에서 다음 노드를 꺼내 이동한다

	만약 순서 자료구조를 사용하지 않았다면
		이웃 노드들 중 무조건 이웃 노드까지 거리가 최저인 노드를 선택했을 것
		이 경우, 방문한 노드를 계속 방문할 수 있다 ~ 이웃을 넣은 게 아니라 무조건 가장 dist 값이 작은 것을 선택하니까
		이 경우엔 visit 값을 통해서 이미 방문한 노드는 방문하지 않도록 해야 한다